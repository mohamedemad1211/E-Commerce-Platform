@model BusinessLayer.DTO.Product.ProductCardDTO

@{
    ViewData["Title"] = "View Details";
    // var currentDate = DateTime.Now.ToString("MMMM dd, yyyy");
}

<!-- Toast Container -->
<div class="toast-container"></div>

<div class="container mt-5" style="margin-top: 100px !important;">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home">Home</a></li>
            <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Product">Products</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
        </ol>
    </nav>

    <!-- Product Details Card -->
    <div class="card shadow-sm">
        <div class="card-body p-4">
            <div class="row">
                <!-- Product Image -->
                <div class="col-md-6 mb-4 mb-md-0">
                    <div class="product-image-container">
                        <img src="/Images/Product/@Model.ImagePath" alt="@Model.Name" class="img-fluid rounded product-image" />
                    </div>
                </div>

                <!-- Product Info -->
                <div class="col-md-6">
                    <div class="product-info">
                        <h1 class="product-title mb-3">@Model.Name</h1>
                        
                        <div class="product-price mb-4">
                            <span class="price-label">Price:</span>
                            <span class="price-value">@Model.Price.ToString("N0") EGP</span>
                        </div>

                        <div class="product-description mb-4">
                            <h5 class="description-label">Description:</h5>
                            <p class="description-text">@Model.Description</p>
                        </div>

                        <div class="product-actions">
                            @if (!User.IsInRole("Admin"))
                            {
                                <button type="button" class="btn-add-to-cart" data-product-id="@Model.Id" style="cursor: pointer; text-decoration: none;">
                                    <i class="fas fa-shopping-cart"></i>
                                    Add to cart
                                </button>
                                <button onclick="goBack()" class="btn-add-to-cart me-2">
                                    <i class="fas fa-arrow-left me-2"></i>Back to Products
                                </button>
                            }
                            
                            @if (User.IsInRole("Admin"))
                            {
                                <div class="d-flex gap-55">
                                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning btn-lg">
                                        <i class="fas fa-edit me-2"></i>Edit Product
                                    </a>
                                    <a asp-action="Delete" asp-controller="Product" asp-route-productId="@Model.Id" 
                                       class="btn btn-danger btn-lg" onclick="return confirm('Are you sure you want to delete this product?')">
                                        <i class="fas fa-trash me-2"></i>Delete
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Similar Products Section -->
<section class="similar-products mt-5">
    <div class="container">
        <h2 class="section-title mb-4">Similar Products</h2>
        <div class="row">
            @if (ViewBag.SimilarProducts != null && ViewBag.SimilarProducts.Count > 0)
            {
                @foreach (var similarProduct in ViewBag.SimilarProducts)
                {
                    <div class="col-md-3 mb-4">
                        <a href="@Url.Action("Details", "Product", new { id = similarProduct.Id })" class="text-decoration-none">
                            <div class="card h-100 product-card">
                                <div class="product-image-container">
                                    <img src="/Images/Product/@similarProduct.ImagePath" class="card-img-top" alt="@similarProduct.Name" 
                                         style="width: 100%; height: 200px; object-fit: contain; padding: 1rem; background-color: #f8f9fa;">
                                </div>
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title text-dark">@similarProduct.Name</h5>
                                    <p class="card-text text-muted" style="font-size: 0.9em; height: 3.9em; overflow: hidden; display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical;">@similarProduct.Description</p>
                                    <div class="mt-auto">
                                        <p class="product-price mb-3">@similarProduct.Price.ToString("N0") EGP</p>
                                        <button class="btn-add-to-cart w-100" onclick="addToCart(@similarProduct.Id)">
                                            <i class="fas fa-shopping-cart"></i>
                                            Add to cart
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <p class="text-center">No similar products found.</p>
                </div>
            }
        </div>
    </div>
</section>

<style>
    /* Toast Styles */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }

    .custom-toast {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        margin-bottom: 10px;
        min-width: 300px;
        max-width: 400px;
        padding: 16px;
        position: relative;
        animation: slideIn 0.3s ease-out;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .toast-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .toast-title {
        margin: 0;
        font-size: 16px;
        font-weight: 600;
    }

    .toast-message {
        margin: 0;
        font-size: 14px;
        color: #666;
    }

    .toast-actions {
        display: flex;
        gap: 8px;
        margin-top: 12px;
    }

    .toast-btn {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .toast-btn-primary {
        background: #000;
        color: white;
    }

    .toast-btn-primary:hover {
        background: #ffd700;
        color: #000;
    }

    .toast-btn-secondary {
        background: #f8f9fa;
        color: #333;
        border: 1px solid #ddd;
    }

    .toast-btn-secondary:hover {
        background: #e9ecef;
    }

    .btn-close {
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        font-size: 16px;
        padding: 4px;
    }

    .btn-close:hover {
        color: #333;
    }

    .date-display {
        font-size: 1.1rem;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }
    
    .date-display i {
        margin-right: 8px;
        color: #007bff;
    }

    .product-image-container {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
    }

    .product-image {
        max-height: 400px;
        width: auto;
        object-fit: contain;
    }

    .product-title {
        font-size: 2.5rem;
        font-weight: 600;
        color: #2c3e50;
    }

    .product-price {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
    }

    .price-label {
        font-size: 1.1rem;
        color: #6c757d;
        margin-right: 10px;
    }

    .price-value {
        font-size: 2rem;
        font-weight: 600;
        color: #007bff;
    }

    .description-label {
        color: #2c3e50;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .description-text {
        color: #6c757d;
        line-height: 1.6;
        font-size: 1.1rem;
    }

    .product-actions {
        margin-top: 2rem;
    }

    .btn {
        padding: 12px 24px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .breadcrumb {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
    }

    .breadcrumb-item a {
        color: #007bff;
        text-decoration: none;
    }

    .breadcrumb-item.active {
        color: #6c757d;
    }

    .btn-add-to-cart {
        background: #000;
        color: #fff;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        padding: 12px 28px;
        font-size: 18px;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        cursor: pointer;
        min-width: 180px;
    }
    .btn-add-to-cart:hover {
        background: #ffd700;
        color: #000;
    }

    .section-title {
        font-size: 2rem;
        font-weight: 600;
        color: #2c3e50;
        position: relative;
        padding-bottom: 0.5rem;
    }

    .section-title::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 50px;
        height: 3px;
        background-color: #000;
    }

    .product-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: 1px solid #ddd;
        cursor: pointer;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }

    .product-image-container {
        background-color: #f8f9fa;
        border-bottom: 1px solid #eee;
    }

    .similar-products .product-price {
        font-size: 1.2rem;
        font-weight: 600;
        color: #007bff;
    }
</style>

<script>
    function goBack() {
        // Check if there's a previous page in the history
        if (window.history.length > 1) {
            window.history.back();
        } else {
            // If no history, redirect to products page
            window.location.href = '@Url.Action("Index", "Product")';
        }
    }
</script>

@section Scripts {
    <script>
        // Toast functionality
        function showToast(title, message, type = 'success', actions = null) {
            const toast = document.createElement('div');
            toast.className = 'custom-toast';
            toast.style.borderLeft = `4px solid ${type === 'success' ? '#28a745' : '#dc3545'}`;
            
            const header = document.createElement('div');
            header.className = 'toast-header';
            header.innerHTML = `
                <h6 class="toast-title">${title}</h6>
                <button type="button" class="btn-close" onclick="this.parentElement.parentElement.remove()">×</button>
            `;
            
            const messageDiv = document.createElement('p');
            messageDiv.className = 'toast-message';
            messageDiv.textContent = message;
            
            toast.appendChild(header);
            toast.appendChild(messageDiv);
            
            if (actions) {
                const actionsDiv = document.createElement('div');
                actionsDiv.className = 'toast-actions';
                actions.forEach(action => {
                    const button = document.createElement('button');
                    button.className = `toast-btn toast-btn-${action.type}`;
                    button.textContent = action.text;
                    button.onclick = () => {
                        action.handler();
                        toast.remove();
                    };
                    actionsDiv.appendChild(button);
                });
                toast.appendChild(actionsDiv);
            }
            
            const container = document.querySelector('.toast-container');
            if (!container) {
                const newContainer = document.createElement('div');
                newContainer.className = 'toast-container';
                document.body.appendChild(newContainer);
                newContainer.appendChild(toast);
            } else {
                container.appendChild(toast);
            }
            
            // Auto remove after 5 seconds if no actions
            if (!actions) {
                setTimeout(() => toast.remove(), 5000);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.btn-add-to-cart').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const productId = this.dataset.productId;
                    
                    if (!productId) {
                        return;
                    }
                    
                    // Show loading state
                    const originalHtml = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
                    this.disabled = true;
                    
                    // Make the fetch call
                    fetch(`/Cart/AddToCart?productId=${productId}`, {
                        method: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            if (response.status === 401) {
                                return response.json().then(data => {
                                    showToast(
                                        'Login Required',
                                        'Please log in to add items to your cart.',
                                        'error',
                                        [
                                            {
                                                text: 'Login',
                                                type: 'primary',
                                                handler: () => window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname)
                                            }
                                        ]
                                    );
                                });
                            }
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data && data.success) {
                            // Update cart count
                            document.querySelector('.cart-count').textContent = data.cartCount;
                            
                            // Show success toast
                            showToast(
                                'Success!',
                                'Product added to cart successfully.',
                                'success',
                                [
                                    {
                                        text: 'Continue Shopping',
                                        type: 'secondary',
                                        handler: () => {}
                                    },
                                    {
                                        text: 'Go to Cart',
                                        type: 'primary',
                                        handler: () => window.location.href = '/Cart/ShowCart'
                                    }
                                ]
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast(
                            'Error',
                            'An error occurred while adding the item to cart.',
                            'error'
                        );
                    })
                    .finally(() => {
                        // Restore button state
                        this.innerHTML = originalHtml;
                        this.disabled = false;
                    });
                });
            });
        });
    </script>
} 