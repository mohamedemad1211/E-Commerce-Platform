@model IEnumerable<BusinessLayer.DTO.Product.ProductCardDTO>
@{
    ViewData["Title"] = "See All Products";
}

<!-- Toast Container -->
<div class="toast-container"></div>

<style>
    /* Toast Styles */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }

    .custom-toast {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        margin-bottom: 10px;
        min-width: 300px;
        max-width: 400px;
        padding: 16px;
        position: relative;
        animation: slideIn 0.3s ease-out;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .toast-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .toast-title {
        margin: 0;
        font-size: 16px;
        font-weight: 600;
    }

    .toast-message {
        margin: 0;
        font-size: 14px;
        color: #666;
    }

    .toast-actions {
        display: flex;
        gap: 8px;
        margin-top: 12px;
    }

    .toast-btn {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .toast-btn-primary {
        background: #000;
        color: white;
    }

    .toast-btn-primary:hover {
        background: #ffd700;
        color: #000;
    }

    .toast-btn-secondary {
        background: #f8f9fa;
        color: #333;
        border: 1px solid #ddd;
    }

    .toast-btn-secondary:hover {
        background: #e9ecef;
    }

    .btn-close {
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        font-size: 16px;
        padding: 4px;
    }

    .btn-close:hover {
        color: #333;
    }

    /* Page Title */
    .page-title {
        font-size: 28px;
        font-weight: bold;
        margin-bottom: 20px;
        color: #333;
        text-align: center;
    }

    /* Product Grid */
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 25px;
        padding: 20px;
        max-width: 1400px;
        margin: 0 auto;
    }

    .product-card {
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s, box-shadow 0.3s;
        height: 550px;
        display: flex;
        flex-direction: column;
        position: relative;
        justify-content: space-between;
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

    .product-link {
        text-decoration: none;
        color: inherit;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        cursor: pointer;
    }

    .product-link:hover {
        text-decoration: none;
        color: inherit;
    }

    .product-image {
        width: 100%;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-bottom: 1px solid #eee;
        padding: 1rem;
        background-color: #f8f9fa;
    }

    .product-image img {
        max-height: 180px;
        width: auto;
        object-fit: contain;
    }

    .product-info {
        padding: 15px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        margin-bottom: 10px;
    }

    .product-name {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        min-height: 44px;
    }

    .product-description {
        font-size: 14px;
        color: #666;
        margin-bottom: 15px;
        height: 60px;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
    }

    .product-price {
        font-size: 25px;
        font-weight: 600;
        color: #1f1f1f;
        text-align: center;
        margin-bottom: 15px;
    }

    .product-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        justify-content: center;
        padding: 0 15px 20px 15px;
    }

    .btn-add-to-cart {
        background: #000;
        color: #fff;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        padding: 12px 28px;
        font-size: 18px;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        cursor: pointer;
        min-width: 180px;
    }
    .btn-add-to-cart:hover {
        background: #ffd700;
        color: #000;
    }

    .btn-details {
        background: #000;
        color: #fff;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        padding: 12px 28px;
        font-size: 18px;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        cursor: pointer;
        min-width: 180px;
    }
    .btn-details:hover {
        background: #ffd700;
        color: #000;
    }
</style>

<br />
<br />
<br />
<br />
<br />
<br />

<h1 class="page-title">All Products</h1>

<div class="product-grid">
    @foreach (var item in Model)
    {
        <div class="product-card">
            <div class="product-image">
                <img src="/Images/Product/@item.ImagePath" alt="@item.Name" />
            </div>
            <div class="product-info">
                <div class="product-name">@Html.DisplayFor(modelItem => item.Name)</div>
                <div class="product-description">@Html.DisplayFor(modelItem => item.Description)</div>
                <div class="product-price">@item.Price.ToString("N0") EGP</div>
            </div>
            <div class="product-actions">
                <button type="button" class="btn-add-to-cart" data-product-id="@item.Id" style="cursor: pointer;">
                    <i class="fas fa-shopping-cart"></i>
                    Add to cart
                </button>
                <a asp-action="Details" asp-route-id="@item.Id" class="btn-details">
                    <i class="fas fa-info-circle"></i>
                    View Details
                </a>
            </div>
        </div>
    }
</div>

<br />
<br />
<br />
<br />

@section Scripts {
    <script>
        // Toast functionality
        function showToast(title, message, type = 'success', actions = null) {
            const toast = document.createElement('div');
            toast.className = 'custom-toast';
            toast.style.borderLeft = `4px solid ${type === 'success' ? '#28a745' : '#dc3545'}`;
            
            const header = document.createElement('div');
            header.className = 'toast-header';
            header.innerHTML = `
                <h6 class="toast-title">${title}</h6>
                <button type="button" class="btn-close" onclick="this.parentElement.parentElement.remove()">×</button>
            `;
            
            const messageDiv = document.createElement('p');
            messageDiv.className = 'toast-message';
            messageDiv.textContent = message;
            
            toast.appendChild(header);
            toast.appendChild(messageDiv);
            
            if (actions) {
                const actionsDiv = document.createElement('div');
                actionsDiv.className = 'toast-actions';
                actions.forEach(action => {
                    const button = document.createElement('button');
                    button.className = `toast-btn toast-btn-${action.type}`;
                    button.textContent = action.text;
                    button.onclick = () => {
                        action.handler();
                        toast.remove();
                    };
                    actionsDiv.appendChild(button);
                });
                toast.appendChild(actionsDiv);
            }
            
            const container = document.querySelector('.toast-container');
            if (!container) {
                const newContainer = document.createElement('div');
                newContainer.className = 'toast-container';
                document.body.appendChild(newContainer);
                newContainer.appendChild(toast);
            } else {
                container.appendChild(toast);
            }
            
            // Auto remove after 5 seconds if no actions
            if (!actions) {
                setTimeout(() => toast.remove(), 5000);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.btn-add-to-cart').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const productId = this.dataset.productId;
                    
                    if (!productId) {
                        return;
                    }
                    
                    // Show loading state
                    const originalHtml = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
                    this.disabled = true;
                    
                    // Make the fetch call
                    fetch(`/Cart/AddToCart?productId=${productId}`, {
                        method: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            if (response.status === 401) {
                                return response.json().then(data => {
                                    showToast(
                                        'Login Required',
                                        'Please log in to add items to your cart.',
                                        'error',
                                        [
                                            {
                                                text: 'Login',
                                                type: 'primary',
                                                handler: () => window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname)
                                            }
                                        ]
                                    );
                                });
                            }
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data && data.success) {
                            // Update cart count
                            document.querySelector('.cart-count').textContent = data.cartCount;
                            
                            // Show success toast
                            showToast(
                                'Success!',
                                'Product added to cart successfully.',
                                'success',
                                [
                                    {
                                        text: 'Continue Shopping',
                                        type: 'secondary',
                                        handler: () => {}
                                    },
                                    {
                                        text: 'Go to Cart',
                                        type: 'primary',
                                        handler: () => window.location.href = '/Cart/ShowCart'
                                    }
                                ]
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast(
                            'Error',
                            'An error occurred while adding the item to cart.',
                            'error'
                        );
                    })
                    .finally(() => {
                        // Restore button state
                        this.innerHTML = originalHtml;
                        this.disabled = false;
                    });
                });
            });
        });
    </script>
}